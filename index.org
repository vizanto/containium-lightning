#+TITLE: Containium
#+SUBTITLE: Application Server as a Library
#+DATE: 19 march 2016
#+AUTHOR: Arnout Roemers & Danny Wilson
#+EMAIL: info@containium.org
#+DESCRIPTION: Lightning Talk at Dutch ClojureDays 2016
#+LANGUAGE: en
#+WWW: http://containium.org
#+GITHUB: http://github.com/containium
#+TWITTER: @containium

#+FAVICON: images/containium-s.png
#+ICON: images/containium-l.svg
#+HASHTAG: #containium

* Intro
- We created an application server for Clojure
- Why? Ask us over a beer :)
  - Hint: Immutant creates new runtime for each app.
- Our goal:
  - Run many (web)apps using the same Clojure runtime
  - Isolated from each other, but sharing clojure.lang.*

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
We created an application server for Clojure called Containium we'd like to introduce to you.
Why we explored this idea in the first place, is something you can ask us over a beer.
Existing applications servers like Immutant and Tomcat require a new Clojure runtime for each app.
We'd like to have small applications (microservices if you will) with no or very low overhead.
The question we asked ourselves was, can we run many (web)apps in the same Clojure runtime, isolated from each other, but sharing clojure.lang.*?
#+END_QUOTE

* Boxure
- Turns out, with (mostly) ClassLoader magic, we can!
- Boxure is a small library that lets you create a "box"
  - Box loads your (leiningen) app
- Very fast, because Clojure runtime is shared
- Datastructure sharing between boxes (apps)
  - No (de)serialization

* Boxure Clojure
- Small patches to Clojure required
  - App (developer) does not notice this, is only for Boxure
  - Package privates
    - Nowadays mainly for clojure.lang.Agent
  - Multimethod lookup caching using weak references
    - Prevents classloader memory leaks
  - Patched for Clojure 1.5.1, 1.6, 1.7 and 1.8
- Patch clojure.lang.Namespace per loader (advanced feature)
  - clojure.core/proxy
  - clojure.core/binding-conveyor-fn

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Boxure is as an isolating classloader. Using package and classname regular expressions, one can specify what classes must be isolated in the box.
Initially, we isolated clojure.lang.RT but shared datastructures.
However, after more experimentation we wanted to go one step further.
Now the entire clojure Runtime is shared. Only clojure Agent's are still isolated, in order for every box to get it's own Thread-pool.
This required a few more core patches, to set the right context when executing futures and agents.
#+END_QUOTE

* Containium, the application server
- Uses Boxure for isolating apps
- Deployment configuration in project.clj
#+BEGIN_SRC edn
(defproject my-app "0.1"
  ...
  :containium {:start my-app.core/start
               :stop my-app.core/stop
               :ring {:handler my-app.core/handler
                      :context "/myapp"}
               :arbritary :thing})
#+END_SRC

* Containium, the application server
- Has base systems in the root classloader
  - Component-like, loaded on startup
  - Shared resources, like database pools, distributed ring SessionStore, etc
#+BEGIN_SRC clojure
    (ns my-app.core
      (:require [containium.system.distributed-session :as session]
                ...))

    (defn start [{:keys [session] :as system}
                 {:keys [arbritary] :as conf}]
      (wrap-handler (fn [h] (wrap-session h {:store session})))
#+END_SRC

* Containium, the application server
- Apps have deployment descriptors
#+BEGIN_SRC edn
{:file "path/to/directory-or-jar"
 :arbritary :override}
#+END_SRC
- Server has commands for deploying, undeploying and swapping apps
- Swapping: deploy new version -> undeploy old version (atomically)
- Very fast
- Great for continuous deployment

* Containium, the libraries
- Containium and its systems is just a set of libraries.
- Whenever an app uses a containiumified system, it can do so outside of containum server.
- All development and testing is therefore "out-of-container"
- Works great for continuous integration

* Example: Dependency isolated Onyx tasks
- Start Onyx once, in the root
- Run tasks isolated from each other.
- No conflicting dependencies between tasks.
- Tasks can still share Systems and resources.
- Continuous deployment of tasks without restarts.
#+ATTR_HTML: :align right :width 200px;
[[file:images/onyx.png]]

#+ATTR_HTML: :class note
#+BEGIN_QUOTE
Multiple web apps in a single runtime is nothing new.
However, Containium enables you to easily build a custom application server from the set of libraries.
You could start Onyx in the root and have tasks isolated, no conflicting using dependencies between tasks.
#+END_QUOTE

* Status and future
- Running stable in production for over a year now
- Yet codebase is very specific for our needs
- Working towards a more modular design
- Working on more configuration possibilities, but also "it just works" out of the box
- Working on transitioning systems (and internals) to mount-lite

* Goal
- Many goals already achieved, with Boxure and current Containium
- Goal in the end, now that it is open source, give the Clojure community an Application Server as a Library that just works.
- A go-to choice of deploying and swapping your apps as it were
* Thank you
:PROPERTIES:
:SLIDE: thank-you-slide segue
:ASIDE: right
:ARTICLE: flexbox vleft auto-fadein
:END:
